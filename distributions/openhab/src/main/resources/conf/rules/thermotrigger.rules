import java.util.Calendar


val int OP_MODE_MANUAL    = 1
val int OP_MODE_ABSENCE   = 2
val int OP_MODE_AUTO      = 3
val int OP_AUTO_MATN      = 4
val int OP_AUTO_JOUR      = 5
val int OP_AUTO_SOIR      = 6
val int OP_AUTO_NUIT      = 7

val int ABS_INFINITE    = 21
val int ABS_TEMPORISED    = 22

var String txt
var int setpoint
var int OpPart

rule "Thermo Trigger : Evaluate Times" when Item ThermoTrigger received command
then
    
    val Calendar  cal = Calendar.getInstance
    
    val long h        = cal.get(Calendar.HOUR_OF_DAY)
    val long m        = cal.get(Calendar.MINUTE)
    val long s        = cal.get(Calendar.SECOND)

    val long currTime = (60 * h + m) * 60 + s
    val long matnTime = (Thermo_Time_Matn.state as Number).longValue
    val long jourTime = (Thermo_Time_Jour.state as Number).longValue
    val long soirTime = (Thermo_Time_Soir.state as Number).longValue
    val long nuitTime = (Thermo_Time_Nuit.state as Number).longValue
    val long abscTime = (Thermo_Time_Absc.state as Number).longValue

    val long atAbscSetdTime = (Thermo_Time_AtAbscSetd.state as Number).longValue
    
    switch (Thermo_OpMode.state)
    {
        case OP_MODE_MANUAL  :
        {
            setpoint = Thermo_Temp_Manual.state
            txt      = "Mode MANUEL, " + setpoint + "°C"
            OpPart   = OP_MODE_MANUAL
        }
        
        case OP_MODE_ABSENCE :
        {
            setpoint = Thermo_Temp_Absc.state
            if (Thermo_OpPart.state == ABS_INFINITE)
            {
                OpPart = ABS_INFINITE
	            txt = "Indéterminée   : " 
		            + Thermo_Temp_Absc.state     + "°C"
            }            	         	        
            else
            {
                OpPart = ABS_TEMPORISED
	            txt = "Jusqu'à "
                    + Thermo_Time_Absc_str.state + "  :  " 
		            + Thermo_Temp_Absc.state     + "°C"
		            
		        if (abscTime > atAbscSetdTime)
		        {
		            if ((currTime < atAbscSetdTime) || (currTime > abscTime))
                       Thermo_OpMode.postUpdate(OP_MODE_AUTO)
		        }
		        else
		        {
		            if ((currTime < atAbscSetdTime) && (currTime > abscTime))
                       Thermo_OpMode.postUpdate(OP_MODE_AUTO)
		        }
	            
            }
        }
        case OP_MODE_AUTO    :
        {
            if      (currTime < matnTime)       OpPart   = OP_AUTO_NUIT
            else if (currTime < jourTime)       OpPart   = OP_AUTO_MATN
            else if (currTime < soirTime)       OpPart   = OP_AUTO_JOUR
            else if (currTime < nuitTime)       OpPart   = OP_AUTO_SOIR
            else /* (currTime < nuitTime) */    OpPart   = OP_AUTO_NUIT
        
            txt = "AUTO, ";
            switch (OpPart)
            {
                case OP_AUTO_MATN      :
                {
                    setpoint  = Thermo_Temp_Matn.state
                    txt = txt + Thermo_Time_Matn_str.state + " - " 
		    	              + Thermo_Time_Jour_str.state + "  :  " 
		                      + Thermo_Temp_Matn.state     + "°C"
                }
                case OP_AUTO_JOUR      :
                {
                    setpoint  = Thermo_Temp_Jour.state
                    txt = txt + Thermo_Time_Jour_str.state + " - " 
		            	      + Thermo_Time_Soir_str.state + "  :  " 
		            	      + Thermo_Temp_Jour.state     + "°C"
                }
                case OP_AUTO_SOIR      :
                {
                    setpoint  = Thermo_Temp_Soir.state
                    txt = txt + Thermo_Time_Soir_str.state + " - " 
		            	      + Thermo_Time_Nuit_str.state + "  :  " 
		            	      + Thermo_Temp_Soir.state     + "°C"
                }
                case OP_AUTO_NUIT      :
                {
                    setpoint  = Thermo_Temp_Nuit.state
                    txt = txt + Thermo_Time_Nuit_str.state + " - " 
		            		  + Thermo_Time_Matn_str.state + "  :  " 
		            		  + Thermo_Temp_Nuit.state     + "°C"
                }
            }
        }
    }

    if (txt != Thermo_OpMode_OpPart.state.toString())
    {
		Thermo_Temp_Manual.postUpdate(setpoint)
        Thermo_OpPart.postUpdate (OpPart)
        Thermo_OpMode_OpPart.postUpdate(txt)	
//		if (chThermo_SetPoint_Out.state != setpoint)
//    	{
//        	chThermo_SetPoint_Out.sendCommand(setpoint)
//    	}
    	
        logInfo("thermotrigger.rules", "--TPM:" + Thermo_OpMode.state 
                                     + ", TPP:" + Thermo_OpPart.state 
                                     + ", nPP:" + OpPart 
                                     + ", txt:" + txt
                                     + "--T:"   + currTime 
                                     + ", M:"   + matnTime 
                                     + ", J:"   + jourTime 
                                     + ", S:"   + soirTime 
                                     + ", N:"   + nuitTime
                                     + ", stp:" + setpoint)

    }

end

